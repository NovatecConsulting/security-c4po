DROP TABLE IF EXISTS PROJECT_DETAILS;
DROP TABLE IF EXISTS FINDING;
DROP TABLE IF EXISTS TEST_STATUS;
DROP TABLE IF EXISTS PROJECT;

CREATE TABLE IF NOT EXISTS SECURITY_TEST (
  ID VARCHAR(255) NOT NULL,
  CATEGORY VARCHAR(255),
  TITLE VARCHAR(255),
  DESCRIPTION TEXT,
  LINK VARCHAR(255),
  PRIMARY KEY (ID)
);

CREATE TABLE IF NOT EXISTS PROJECT (
  ID IDENTITY,
  CLIENT VARCHAR(255),
  TITLE VARCHAR(255),
  CREATED DATETIME,

  TESTER_NAME VARCHAR(255),
  SELECTED_LOGO_TESTER INT,
  SELECTED_LOGO_CLIENT INT,
);

CREATE TABLE IF NOT EXISTS PROJECT_DETAILS (
  PROJECT VARCHAR(255),
  PROJECT_KEY VARCHAR(255),
  TESTER_NAME VARCHAR(255),
  SELECTED_LOGO_TESTER INT,
  SELECTED_LOGO_CLIENT INT,
--   PRIMARY KEY (PROJECT_ID),
--   CONSTRAINT `PROJECT_ID` FOREIGN KEY (`PROJECT_ID`) REFERENCES `PROJECT` (`ID`) ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS TEST_STATUS (
  ID VARCHAR(255) NOT NULL,
  TEST_ID VARCHAR(255) NOT NULL,
  PROJECT_ID VARCHAR(255) NOT NULL,
  TEST_PROGRESS VARCHAR(255) NOT NULL,
  CREATED DATETIME,
  PRIMARY KEY (ID),
--   KEY `PROJECT_ID` (`PROJECT_ID`),
--   CONSTRAINT `FK_TESTRESULT_PROJECTID` FOREIGN KEY (`PROJECT_ID`) REFERENCES `PROJECT` (`ID`) ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS FINDING (
  ID VARCHAR(255) NOT NULL,
  TEST_ID VARCHAR(255) NOT NULL,
  PROJECT_ID VARCHAR(255) NOT NULL,
  TITLE VARCHAR(255),
  SEVERITY INTEGER,
  DESCRIPTION TEXT,
  REPRODUCTION TEXT,
  IMPACT TEXT,
  MITIGATION TEXT,
  AFFECTED_URLS TEXT,
  CREATED DATETIME,
  PRIMARY KEY (ID)
);
